import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QGridLayout, QLabel, QLineEdit, QPushButton, QVBoxLayout, QWidget, QCalendarWidget, QComboBox
from PyQt5.QtGui import QPixmap, QIcon, QPalette, QColor
from PyQt5 import QtCore
from PyQt5.QtCore import Qt 

from datetime import datetime
# from claseEmpresa import Empresa
import validaciones as val
import Utilities as util
from ClasePersonas import Administrador, Usuarios, Personas,diccEmpleados,diccUsuarios
from ClaseAlquileres import Alquiler,diccAlquileres
from ClaseReservas import Reserva,diccReservas
from ClaseVehiculos import Vehiculos,diccVehiculos
import hashlib

class LoginWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Inicio de Sesión')
        self.setMinimumSize(600, 600)

        # Create a central widget and a layout
        central_widget = QWidget(self)
        layout = QVBoxLayout(central_widget)

        # Create a logo label
        logo_label = QLabel(self)
        logo_pixmap = QPixmap('logo.png')  # Adjust the path to your logo image file
        logo_label.setPixmap(logo_pixmap)
        logo_label.setAlignment(Qt.AlignCenter)

        # Create a welcome label
        welcome_label = QLabel('Bienvenido/a a NoVoyEnTren.com', self)
        welcome_label.setAlignment(Qt.AlignCenter)

        # Create labels
        label_dni = QLabel('DNI del usuario:', self)
        label_user = QLabel('Nombre de Usuario:', self)
        label_password = QLabel('Contraseña:', self)

        # Create input boxes
        input_dni = QLineEdit(self)
        self.input_dni = input_dni
        input_user = QLineEdit(self)
        self.input_user = input_user
        input_password = QLineEdit(self)
        self.input_password = input_password
        input_password.setEchoMode(QLineEdit.Password)

        # Create login button
        self.button_login = QPushButton('Ingresar', self)
        self.button_registro = QPushButton('No tenes cuenta? Registrate', self)
        self.button_admin = QPushButton('Ingresar como Administrador',self)

        # Create the error label (hidden by default)
        self.error_label = QLabel("El usuario, DNI o contraseña es incorrecto.", central_widget)
        self.error_label.setStyleSheet("color: red")
        self.error_label.hide()

        self.button_login.clicked.connect(self.openMainWindow)

        self.button_admin.clicked.connect(self.openAdminWindow)

        self.button_registro.clicked.connect(self.openRegistroWindow)

        # Add widgets to the layout
        layout.addWidget(logo_label)
        layout.addWidget(welcome_label)
        layout.addWidget(label_dni)
        layout.addWidget(input_dni)
        layout.addWidget(label_user)
        layout.addWidget(input_user)
        layout.addWidget(label_password)
        layout.addWidget(input_password)
        layout.addWidget(self.button_login)
        layout.addWidget(self.button_registro)
        layout.addWidget(self.button_admin)
        layout.addWidget(self.error_label)

        # Set the central widget and apply the style sheet
        self.setCentralWidget(central_widget)
        with open('Estilo.qss', 'r') as est:
            style = est.read()
            self.setStyleSheet(style)

    def resizeEvent(self, event):
        # Center the objects when the window is resized
        super().resizeEvent(event)
        self.centerObjects()

    def centerObjects(self):
        # Center the objects in the window
        central_widget = self.centralWidget()
        layout = central_widget.layout()
        layout.setAlignment(Qt.AlignCenter)

    def show_error(self):
        self.error_label.show()
    
    def clear_inputs(self):
        self.input_dni.clear()
        self.input_user.clear()
        self.input_password.clear()
    
    def openMainWindow(self):
        dni=self.input_dni.text()
        usuario = self.input_user.text() 
        contrasena = self.input_password.text()
        validado = val.validarexistenciaPersona(dni, contrasena, Usuarios)

        if not validado:
            self.show_error()
            self.clear_inputs()
                   
        else:
            self.close()
            self.window = MainWindow(dni, usuario, contrasena) 
            self.window.show()

    def openAdminWindow(self):
        legajo = self.input_user.text()
        contraseña = self.input_password.text()
        validado = val.validarexistenciaPersona(legajo, contraseña, Administrador)
                
        if not validado:
            self.show_error()
            self.clear_inputs()

        else:
            #AGREGAR EL GUARDADO DEL LEGAJO
            self.close()
            self.window = AdminWindow(legajo,contraseña)
            self.window.show()

    def openRegistroWindow(self):
        self.close()
        self.window = RegistroWindow()
        self.window.show()

class AdminWindow(QMainWindow):
    def __init__(self, legajo, contraseña):
        super().__init__()
        self.setWindowTitle('Gestión de Administrador')
        self.setMinimumSize(600, 600)

        """Traigo los valores de legajo y contraseña desde Login window"""
        self.legajo=legajo
        self.contraseña=contraseña

        # Create a central widget and a layout
        central_widget = QWidget(self)
        layout = QVBoxLayout(central_widget)
        layout.setAlignment(Qt.AlignCenter)

        # Create buttons
        self.button1 = QPushButton('Agregar un auto', central_widget)
        self.button1.setIcon(QIcon('icon1.png'))  # Replace with the path to your button icon
        self.button1.clicked.connect(self.openAgregarAuto)

        self.button2 = QPushButton('Modificar un auto existente', central_widget)
        self.button2.setIcon(QIcon('icon2.png'))  # Replace with the path to your button icon
        self.button2.clicked.connect(self.openModificarAuto)

        self.button3 = QPushButton('Eliminar un auto', central_widget)
        self.button3.setIcon(QIcon('icon3.png'))  # Replace with the path to your button icon
        # self.button3.clicked.connect(self.openEliminarAuto)  

        # Add buttons to the layout
        layout.addWidget(self.button1)
        layout.addWidget(self.button2)
        layout.addWidget(self.button3)

        # Set the central widget and apply the style sheet
        self.setCentralWidget(central_widget)
        with open('Estilo.qss', 'r') as est:
            style = est.read()
            self.setStyleSheet(style)

    def openAgregarAuto(self):
        self.close()
        self.window1 = AgregarAuto(self.legajo)
        self.window1.show()

    def openModificarAuto(self):
        self.close()
        self.window2 = ModificarAuto(self.legajo)
        self.window2.show()

    # def openEliminarAuto(self):
    #     self.close()
    #     self.window3 = EliminarAuto()
    #     self.window3.show()

class AgregarAuto(QMainWindow):
    def __init__(self, legajo):
        super().__init__()
        self.setWindowTitle('Agregar un auto')
        self.setMinimumSize(600, 600)

        """Traigo el valor de legajo desde Admin Window"""
        self.legajo=legajo

        # Set window flags to make the window resizable
        self.setWindowFlags(Qt.Window | Qt.WindowMinMaxButtonsHint | Qt.WindowCloseButtonHint | Qt.WindowResizable)

        # Create a central widget and a layout
        central_widget = QWidget(self)
        layout = QVBoxLayout(central_widget)

        # Create labels and input boxes
        label_patente = QLabel("Patente:", central_widget)
        self.input_patente = QLineEdit(central_widget)

        label_marca = QLabel("Marca:", central_widget)
        self.input_marca = QLineEdit(central_widget)

        label_modelo = QLabel("Modelo:", central_widget)
        self.input_modelo = QLineEdit(central_widget)

        label_año = QLabel("Año:", central_widget)
        self.input_año = QLineEdit(central_widget)

        label_tipo = QLabel("Tipo:", central_widget)   
        self.input_tipo = QLineEdit(central_widget)

        label_gama = QLabel("Gama:", central_widget)
        self.input_gama = QLineEdit(central_widget)

        label_precioxdia = QLabel("Precio por dia:", central_widget)
        self.input_precioxdia = QLineEdit(central_widget)

        #Creo un label que informa cuando se agregó un auto exitosamente. Está escondido por defecto, se muestra al pasar la validación de los datos
        self.confirmado_label = QLabel("El auto fue agregado exitosamente!.", central_widget)
        self.confirmado_label.setStyleSheet("color: green")
        self.confirmado_label.hide()

        layout.addWidget(label_patente)
        layout.addWidget(self.input_patente)
        layout.addWidget(label_marca)
        layout.addWidget(self.input_marca)
        layout.addWidget(label_modelo)
        layout.addWidget(self.input_modelo)
        layout.addWidget(label_año)
        layout.addWidget(self.input_año)
        layout.addWidget(label_tipo)
        layout.addWidget(self.input_tipo)
        layout.addWidget(label_gama)
        layout.addWidget(self.input_gama)
        layout.addWidget(label_precioxdia)
        layout.addWidget(self.input_precioxdia)
        layout.addWidget(self.confirmado_label)

        # Create the register button
        register_button = QPushButton('Register', central_widget)
        register_button.clicked.connect(self.validate_data)
        layout.addWidget(register_button)

        # Set the central widget
        self.setCentralWidget(central_widget)

        self.setLayout(layout)
        with open('Estilo.qss', 'r') as est:
            style = est.read()
            self.setStyleSheet(style)        
        self.show()

    def show_confirmado(self):
        self.confirmado_label.show()

    def validate_data(self):    
        patente = self.input_patente.text()
        marca = self.input_marca.text()
        modelo = self.input_modelo.text()
        año = self.input_año.text()
        tipo = self.input_tipo.text()
        gama = self.input_gama.text()
        precioxdia = self.input_precioxdia.text()

        valid_data = True

        if val.validarpatente(patente) == False:
            valid_data = False
            self.input_patente.clear()
            self.input_patente.setPlaceholderText("Dato erroneo")
            palette = self.input_patente.palette()
            placeholder_color = QColor(255, 0, 0)  # Red color
            palette.setColor(QPalette.PlaceholderText, placeholder_color)
            self.input_patente.setPalette(palette)

        if val.validarmodelo(modelo) == False:
            valid_data = False
            self.input_modelo.clear()
            self.input_modelo.setPlaceholderText("Dato erroneo")
            palette = self.input_modelo.palette()
            placeholder_color = QColor(255, 0, 0)  # Red color
            palette.setColor(QPalette.PlaceholderText, placeholder_color)
            self.input_modelo.setPalette(palette)

        if val.validarmarca(marca) == False:
            valid_data = False
            self.input_marca.clear()
            self.input_marca.setPlaceholderText("Dato erroneo")
            palette = self.input_marca.palette()
            placeholder_color = QColor(255, 0, 0)  # Red color
            palette.setColor(QPalette.PlaceholderText, placeholder_color)
            self.input_marca.setPalette(palette)

        if val.validaranio(año) == False:
            valid_data = False
            self.input_año.clear()
            self.input_año.setPlaceholderText("Dato erroneo")
            palette = self.input_año.palette()
            placeholder_color = QColor(255, 0, 0)  # Red color
            palette.setColor(QPalette.PlaceholderText, placeholder_color)
            self.input_año.setPalette(palette)

        if val.validartipo(tipo) == False:
            valid_data = False
            self.input_tipo.clear()
            self.input_tipo.setPlaceholderText("Dato erroneo")
            palette = self.input_tipo.palette()
            placeholder_color = QColor(255, 0, 0)  # Red color
            palette.setColor(QPalette.PlaceholderText, placeholder_color)
            self.input_tipo.setPalette(palette)

        if val.validargama(gama) == False:
            valid_data = False
            self.input_gama.clear()
            self.input_gama.setPlaceholderText("Dato erroneo")
            palette = self.input_gama.palette()
            placeholder_color = QColor(255, 0, 0)  # Red color
            palette.setColor(QPalette.PlaceholderText, placeholder_color)
            self.input_gama.setPalette(palette)

        if valid_data== True:
            self.show_confirmado()
            diccEmpleados[self.legajo].agregarVehiculo(patente, modelo, marca, año, tipo ,gama)  
            util.escribirCsv('Vehiculos.csv', diccVehiculos)
            

class ModificarAuto(QWidget):   
    def __init__(self, legajo):
        super().__init__()
        self.setWindowTitle("Modificar un auto")
        self.initUI()

        """Traigo el valor de legajo desde AdminWindow"""
        self.legajo=legajo
    
    def initUI(self):
        central_widget = QWidget(self)
        layout = QVBoxLayout(central_widget)

        # Label
        label_patente = QLabel("Ingrese la patente del auto:")
        label_atributo= QLabel("Ingrese el atributo a cambiar:")
        label_valor = QLabel("Ingrese el valor por el que desea modificar")
        self.label_confirmado = QLabel("El dato ha sido cambiado satisfactoriamente", central_widget)
        self.label_confirmado.setStyleSheet("color: green")
        self.label_confirmado.hide()
        
        # Input Box
        self.input_patente = QLineEdit(central_widget)
        self.input_atributo = QLineEdit(central_widget)
        self.input_valor = QLineEdit(central_widget)

        layout.addWidget(label_patente)
        layout.addWidget(self.input_patente)
        layout.addWidget(label_atributo)
        layout.addWidget(self.input_atributo)
        layout.addWidget(label_valor)
        layout.addWidget(self.input_valor)
        layout.addWidget(self.label_confirmado)

        # Button
        self.button = QPushButton("Continuar")
        self.button.clicked.connect(self.ClickContinuar)
        layout.addWidget(self.button)

        self.button2 = QPushButton("Volver")
        self.button2.clicked.connect(self.Volver)

        self.setLayout(layout)
        with open('Estilo.qss', 'r') as est:
            style = est.read()
            self.setStyleSheet(style)        
        self.show()

    def show_confirmado(self):
        self.label_confirmado.show()


    def ClickContinuar(self):
        patente = self.input_patente.text()
        atributo= self.input_atributo.text()
        valor = self.input_valor.text()

        validado = True
        if val.validarpatente(patente) == False:
            validado= False

            self.input_patente.clear()
            self.input_patente.setPlaceholderText("Dato erroneo")
            palette = self.input_patente.palette()
            placeholder_color = QColor(255, 0, 0)  # Red color
            palette.setColor(QPalette.PlaceholderText, placeholder_color)
            self.input_patente.setPalette(palette)
        
        if val.validaratributo(atributo)==False:
            validado= False
        else:
            match atributo.strip().lower():

                case 'patente':
                    if val.validarpatente(valor)==False:
                        self.input_valor.clear()
                        self.input_valor.setPlaceholderText("Ingrese una patente válida")
                        palette = self.input_valor.palette()
                        placeholder_color = QColor(255, 0, 0)  # Red color
                        palette.setColor(QPalette.PlaceholderText, placeholder_color)
                        self.input_valor.setPalette(palette)
                    else:
                        diccEmpleados[self.legajo].modificarVehiculo(patente,atributo,valor)
                        util.escribirCsv('Vehiculos.csv', diccVehiculos)
                        self.show_confirmado()

                case 'modelo':
                    if val.validarmodelo(valor)==False:
                        self.input_valor.clear()
                        self.input_valor.setPlaceholderText("Ingrese un modelo válido")
                        palette = self.input_valor.palette()
                        placeholder_color = QColor(255, 0, 0)  # Red color
                        palette.setColor(QPalette.PlaceholderText, placeholder_color)
                        self.input_valor.setPalette(palette)
                    else:
                        diccEmpleados[self.legajo].modificarVehiculo(patente,atributo,valor)
                        util.escribirCsv('Vehiculos.csv', diccVehiculos)
                        self.show_confirmado()

                case 'marca':
                    if val.validarmarca(valor)==False:
                        self.input_valor.clear()
                        self.input_valor.setPlaceholderText("Ingrese una marca válida")
                        palette = self.input_valor.palette()
                        placeholder_color = QColor(255, 0, 0)  # Red color
                        palette.setColor(QPalette.PlaceholderText, placeholder_color)
                        self.input_valor.setPalette(palette)
                    else:
                        diccEmpleados[self.legajo].modificarVehiculo(patente,atributo,valor) 
                        util.escribirCsv('Vehiculos.csv', diccVehiculos)
                        self.show_confirmado()

                case 'año':  
                    if val.validaranio(valor)==False:
                        self.input_valor.clear()
                        self.input_valor.setPlaceholderText("Ingrese un año válido")
                        palette = self.input_valor.palette()
                        placeholder_color = QColor(255, 0, 0)  # Red color
                        palette.setColor(QPalette.PlaceholderText, placeholder_color)
                        self.input_valor.setPalette(palette)
                    else:
                        diccEmpleados[self.legajo].modificarVehiculo(patente,atributo,valor)
                        util.escribirCsv('Vehiculos.csv', diccVehiculos)
                        self.show_confirmado() 

                case 'tipo':
                    if val.validartipo(valor)==False:
                        self.input_valor.clear()
                        self.input_valor.setPlaceholderText("Ingrese un email correcto")
                        palette = self.input_valor.palette()
                        placeholder_color = QColor(255, 0, 0)  # Red color
                        palette.setColor(QPalette.PlaceholderText, placeholder_color)
                        self.input_valor.setPalette(palette)
                    else:
                        diccEmpleados[self.legajo].modificarVehiculo(patente,atributo,valor) 
                        util.escribirCsv('Vehiculos.csv', diccVehiculos)
                        self.show_confirmado()
              
                case 'gama':
                    if val.validargama(valor)==False:
                        self.input_valor.clear()
                        self.input_valor.setPlaceholderText("Ingrese una gama de vehículo válida")
                        palette = self.input_valor.palette()
                        placeholder_color = QColor(255, 0, 0)  # Red color
                        palette.setColor(QPalette.PlaceholderText, placeholder_color)
                        self.input_valor.setPalette(palette)
                    else:
                        diccEmpleados[self.legajo].modificarVehiculo(patente,atributo,valor)
                        util.escribirCsv('Vehiculos.csv', diccVehiculos)
                        self.show_confirmado()
                
                case 'precioxdia':
                    if val.validarprecio(valor)==False:
                        self.input_valor.clear()
                        self.input_valor.setPlaceholderText("Ingrese un precio válido")
                        palette = self.input_valor.palette()
                        placeholder_color = QColor(255, 0, 0)  # Red color
                        palette.setColor(QPalette.PlaceholderText, placeholder_color)
                        self.input_valor.setPalette(palette)
                    else:
                        diccEmpleados[self.legajo].modificarVehiculo(patente,atributo,valor)
                        util.escribirCsv('Vehiculos.csv', diccVehiculos)
                        self.show_confirmado()

    def Volver(self):
        self.close()
        self.window = AdminWindow(self.legajo)
        self.window.show()     


class RegistroWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Registro de usuario')
        self.setMinimumSize(700,700)

        # Create a central widget and a layout
        central_widget = QWidget(self)
        layout = QVBoxLayout(central_widget)

        # Create a logo label
        logo_label = QLabel(self)
        logo_pixmap = QPixmap('logo.png')  # Adjust the path to your logo image file
        logo_label.setPixmap(logo_pixmap)
        logo_label.setAlignment(Qt.AlignCenter)

        # Create a welcome label
        welcome_label = QLabel('Registrese en nuestra plataforma', self)
        welcome_label.setAlignment(Qt.AlignCenter)

        # Create labels and input boxes
        label_dni = QLabel("DNI:", central_widget)
        self.input_dni = QLineEdit(central_widget)

        label_nombre = QLabel("Nombre:", central_widget)
        self.input_nombre = QLineEdit(central_widget)

        label_apellido = QLabel("Apellido:", central_widget)
        self.input_apellido = QLineEdit(central_widget)

        label_fecnac = QLabel("Fecha de nacimiento:", central_widget)
        self.input_fecnac = QLineEdit(central_widget)

        label_usuario = QLabel("Usuario:", central_widget)
        self.input_usuario = QLineEdit(central_widget)

        label_email = QLabel("Email:", central_widget)   
        self.input_email = QLineEdit(central_widget)

        label_contraseña = QLabel("Contraseña:", central_widget)
        self.input_contraseña = QLineEdit(central_widget)

        label_confirmarcontraseña = QLabel("Confirmar contraseña:", central_widget)
        self.input_confirmarcontraseña = QLineEdit(central_widget)

        #Creo un label que informa cuando se agregó un auto exitosamente. Está escondido por defecto, se muestra al pasar la validación de los datos
        self.confirmado_label = QLabel("Usted ha sido registrado exitosamente!.", central_widget)
        self.confirmado_label.setStyleSheet("color: green")
        self.confirmado_label.hide()


        layout.addWidget(logo_label)
        layout.addWidget(welcome_label)
        layout.addWidget(label_dni)
        layout.addWidget(self.input_dni)
        layout.addWidget(label_nombre)
        layout.addWidget(self.input_nombre)
        layout.addWidget(label_apellido)
        layout.addWidget(self.input_apellido)
        layout.addWidget(label_fecnac)
        layout.addWidget(self.input_fecnac)
        layout.addWidget(label_usuario)
        layout.addWidget(self.input_usuario)
        layout.addWidget(label_email)
        layout.addWidget(self.input_email)
        layout.addWidget(label_contraseña)
        layout.addWidget(self.input_contraseña)
        layout.addWidget(label_confirmarcontraseña)
        layout.addWidget(self.input_confirmarcontraseña)
        layout.addWidget(self.confirmado_label)

        # Create the register button
        register_button = QPushButton('Registrarse', central_widget)
        register_button.clicked.connect(self.validacionRegistro)
        layout.addWidget(register_button)

        # Set the central widget
        self.setCentralWidget(central_widget)
        with open('Estilo.qss', 'r') as est:
            style = est.read()
            self.setStyleSheet(style)


        # Set the central widget and apply the style sheet
        self.setCentralWidget(central_widget)
        with open('Estilo.qss', 'r') as est:
            style = est.read()
            self.setStyleSheet(style)

    def show_Confirmado(self):
        self.confirmado_label.show()

    
    def validacionRegistro(self):
        dni= self.input_dni.text()
        nombre= self.input_nombre.text()
        apellido= self.input_apellido.text()
        fecnac= self.input_fecnac.text()
        usuario=self.input_usuario.text()
        email=self.input_email.text()
        contraseña= self.input_contraseña.text()
        confcontraseña=self.input_confirmarcontraseña.text()

        validado=True

        if val.validardni(dni)==False:
            validado=False

            self.input_dni.clear()
            self.input_dni.setPlaceholderText("Reingrese el dato de forma correcta")
            palette = self.input_dni.palette()
            placeholder_color = QColor(255, 0, 0)  # Red color
            palette.setColor(QPalette.PlaceholderText, placeholder_color)
            self.input_dni.setPalette(palette)
        
        if val.validarnombre(nombre)==False:
            validado=False

            self.input_nombre.clear()
            self.input_nombre.setPlaceholderText("Reingrese el dato de forma correcta")
            palette = self.input_nombre.palette()
            placeholder_color = QColor(255, 0, 0)  # Red color
            palette.setColor(QPalette.PlaceholderText, placeholder_color)
            self.input_nombre.setPalette(palette)
        
        if val.validarnombre(apellido)==False:
            validado=False

            self.input_apellido.clear()
            self.input_apellido.setPlaceholderText("Reingrese el dato de forma correcta")
            palette = self.input_apellido.palette()
            placeholder_color = QColor(255, 0, 0)  # Red color
            palette.setColor(QPalette.PlaceholderText, placeholder_color)
            self.input_apellido.setPalette(palette)
       
        if val.validarusuario(usuario)==False:
            validado=False

            self.input_usuario.clear()
            self.input_usuario.setPlaceholderText("Reingrese el dato de forma correcta")
            palette = self.input_usuario.palette()
            placeholder_color = QColor(255, 0, 0)  # Red color
            palette.setColor(QPalette.PlaceholderText, placeholder_color)
            self.input_usuario.setPalette(palette)
        
        if val.validarFecha(fecnac)==False:
            validado=False

            self.input_fecnac.clear()
            self.input_fecnac.setPlaceholderText("Reingrese el dato de forma correcta")
            palette = self.input_fecnac.palette()
            placeholder_color = QColor(255, 0, 0)  # Red color
            palette.setColor(QPalette.PlaceholderText, placeholder_color)
            self.input_fecnac.setPalette(palette)
        
        if val.validarcontraseña(contraseña)==False:
            validado=False

            self.input_contraseña.clear()
            self.input_contraseña.setPlaceholderText("Ingrese una contraseña entre 6 y 20 caracteres")
            palette = self.input_contraseña.palette()
            placeholder_color = QColor(255, 0, 0)  # Red color
            palette.setColor(QPalette.PlaceholderText, placeholder_color)
            self.input_contraseña.setPalette(palette)
        
        if contraseña != confcontraseña:
            validado=False

            self.input_confirmarcontraseña.clear()
            self.input_confirmarcontraseña.setPlaceholderText("Las contraseñas deben coincidir")
            palette = self.input_confirmarcontraseña.palette()
            placeholder_color = QColor(255, 0, 0)  # Red color
            palette.setColor(QPalette.PlaceholderText, placeholder_color)
            self.input_confirmarcontraseña.setPalette(palette)
        
        if validado==True:
            self.show_Confirmado() #VER SI SE PUEDE HACER UNA VENTANA EMERGENTE PARA VOLVER... NO SE SI LLEGAMOS. 
            Usuarios.agregarUsuario(dni, usuario, nombre, apellido, fecnac, email, contraseña)
            util.escribirCsv('Usuarios.csv', diccUsuarios)
            

class MainWindow(QMainWindow):
    def __init__(self, dni, usuario, contraseña):
        super().__init__()
        self.setWindowTitle('NoVoyEnTren.com')
        self.setMinimumSize(700, 700)

        """Traigo desde la ventana de inicio los datos de usuario y dni"""
        self.dni=dni
        self.usuario=usuario
        self.contraseña=contraseña

        # Create a central widget and a layout
        central_widget = QWidget(self)
        layout = QVBoxLayout(central_widget)
        layout.setAlignment(Qt.AlignCenter)

        """Traigo a un QLabel los valores de dni y usuario desde la ventana de inicio de sesión"""
        self.dnix=QLabel()
        self.usuariox=QLabel(central_widget)

        # Create buttons
        self.button1 = QPushButton('Hacer una Reserva', central_widget)
        self.button1.setIcon(QIcon('icon1.png'))  # Replace with the path to your button icon
        self.button1.clicked.connect(self.openReserva)

        self.button2 = QPushButton('Cancelar una Reserva existente', central_widget)
        self.button2.setIcon(QIcon('icon2.png'))  # Replace with the path to your button icon
        self.button2.clicked.connect(self.openCancelacion)

        self.button3 = QPushButton('Cambiar datos personales', central_widget)
        self.button3.setIcon(QIcon('icon3.png'))  # Replace with the path to your button icon
        self.button3.clicked.connect(self.openCambioDatos)

        # Add buttons to the layout
        layout.addWidget(self.button1)
        layout.addWidget(self.button2)
        layout.addWidget(self.button3)

        # Set the central widget and apply the style sheet
        self.setCentralWidget(central_widget)
        with open('Estilo.qss', 'r') as est:
            style = est.read()
            self.setStyleSheet(style)

    def openReserva(self):
        self.close()
        self.window1 = Reserva(self.dni)
        self.window1.show()

    def openCancelacion(self):
        self.close()
        self.window2 = Cancelacion(self.dni)
        self.window2.show()

    def openCambioDatos(self):
        self.close()
        self.window3 = CambioDatos(self.dni)
        self.window3.show()

class Reserva(QWidget):
    def __init__(self,dni):
        super().__init__()
        self.setWindowTitle("Elegi tus fechas de alquiler")
        self.setMinimumSize(700, 700)
        self.initUI()

        """Traigo desde MainWindow el valor de DNI"""
        self.dni= dni

    def initUI(self):
        central_widget = QWidget(self)
        layout = QVBoxLayout(central_widget)

        # First Calendar
        label1 = QLabel("Fecha de Inicio")
        layout.addWidget(label1)
        self.calendar1 = QCalendarWidget()
        layout.addWidget(self.calendar1)

        # Second Calendar
        label2 = QLabel("Fecha de Fin")
        layout.addWidget(label2)
        self.calendar2 = QCalendarWidget()
        layout.addWidget(self.calendar2)

        """Labels y combo boxes de tipo y gama de auto que se desea alquilar"""
        label_comboTipo = QLabel("Seleccione el tipo de vehículo que desea alquilar")
        label_comboGama = QLabel("Seleccione la gama de vehículo que desea alquilar")
        self.comboTipo = QComboBox(self)
        self.comboGama = QComboBox(self)

        # Add options to combo boxes
        self.comboTipo.addItem("Sedan")
        self.comboTipo.addItem("Pick-up")
        self.comboTipo.addItem("SUV")
        self.comboTipo.addItem("Deportivo")

        self.comboGama.addItem("Baja")
        self.comboGama.addItem("Media")
        self.comboGama.addItem("Alta")

        """Se agregan los labels y combo boxes al layout"""
        layout.addWidget(label_comboTipo)
        layout.addWidget(self.comboTipo)
        layout.addWidget(label_comboGama)
        layout.addWidget(self.comboGama)

        """Labels ocultos para la confirmación de la reserva y por si está mal la selección de fechas"""
        self.confirmado_label= QLabel("La reserva fue realizada exitosamente")
        self.confirmado_label.setStyleSheet("color: green")
        self.confirmado_label.hide()
        layout.addWidget(self.confirmado_label)

        self.label_error=QLabel("Seleccione una fecha de inicio con más de 5 días de anticipación, y fecha de fin posterior.")
        self.label_error.setStyleSheet("color: red")
        self.label_error.hide()
        layout.addWidget(self.label_error)

        self.label_auto=QLabel("Lo sentimos, no hay autos disponibles según lo pedido")
        self.label_auto.setStyleSheet("color: red")
        self.label_auto.hide()
        layout.addWidget(self.label_error)

        """Se crea boton de confirmar reserva y de volver a la página anterior"""
        self.button1 = QPushButton("Confirmar")
        layout.addWidget(self.button1)
        self.button1.clicked.connect(self.ClickConfirmar)

        self.button2 = QPushButton("Volver")
        layout.addWidget(self.button1)
        self.button2.clicked.connect(self.Volver)

        self.setLayout(layout)
        with open('Estilo.qss', 'r') as est:
            style = est.read()
            self.setStyleSheet(style)        
        self.show()

    def showAuto(self):
        self.label_auto.show()

    def showConfirmado(self):
        self.confirmado_label.show()
    
    def showError(self):
        self.label_error.show()

    def ClickConfirmar(self):

        tipo = self.comboTipo.currentText().lower()
        gama = self.comboGama.currentText().lower()
        fecha_inicio = self.calendar1.selectedDate().toString("dd-MM-yyyy")
        fecha_fin = self.calendar2.selectedDate().toString("dd-MM-yyyy")
        validado = True

        if val.validarAgregarFechaInicio(fecha_inicio)==False:
            self.showError()
            validado = False
        
        if val.validarFechaFin(fecha_inicio, fecha_fin)==False:
            self.showError()
            validado = False
        
        if validado == True:
            self.showConfirmado()
            auto = Vehiculos.asignarauto(fecha_inicio,fecha_fin,tipo,gama)

            if auto== None:
                self.showAuto()
            else:
                diccUsuarios[self.dni].agregarReserva(auto, fecha_inicio, fecha_fin)
                util.escribirCsv('Reservas.csv', diccReservas)
                self.showConfirmado()

# AGREGAR LA LLEGADA DEL DNI HASTA ACA DESDE EL INICIO

    def Volver(self):
        self.close()
        self.window = MainWindow(self.dni)
        self.window.show()            


class Cancelacion(QWidget):
    def __init__(self, dni):
        super().__init__()
        self.setWindowTitle("Cancelación de reservas")
        self.initUI()

        """Traigo desde MainWindow el valor de DNI"""
        self.dni=dni

    def initUI(self):
        layout = QVBoxLayout()

        # Label
        label_idres = QLabel("Ingresa tu código de reserva:")
        layout.addWidget(label_idres)

        # Input Box
        self.input_idres = QLineEdit()
        layout.addWidget(self.input_idres)

        """Se crea labels de confirmación y de error, ocultos por defecto."""
        self.confirmado_label= QLabel("La reserva fue cancelada exitosamente")
        self.confirmado_label.setStyleSheet("color: green")
        self.confirmado_label.hide()
        layout.addWidget(self.confirmado_label)

        self.label_error=QLabel("Ingrese un id de reserva válido")
        self.label_error.setStyleSheet("color: red")
        self.label_error.hide()
        layout.addWidget(self.label_error)

        # Button
        self.button = QPushButton("Continuar")
        self.button.clicked.connect(self.confirmButtonClicked)
        layout.addWidget(self.button)

        self.button2 = QPushButton("Volver")
        self.button2.clicked.connect(self.Volver)

        self.setLayout(layout)
        with open('Estilo.qss', 'r') as est:
            style = est.read()
            self.setStyleSheet(style)        
        self.show()

    def showConfirmado(self):
        self.confirmado_label.show()
    
    def showError(self):
        self.label_error.show()

    def confirmButtonClicked(self):
        idres= self.input_idres.text().strip()
        validado=True

        if val.validarReserva(idres)==False:
            validado=False
            self.showError()
        else:
            self.showConfirmado()
            diccUsuarios[self.dni].cancelarReserva(idres)
            util.escribirCsv('Reservas.csv', diccReservas)
    
    def Volver(self):
        self.close()
        self.window = MainWindow(self.dni)
        self.window.show()     


class CambioDatos(QWidget):
    def __init__(self,dni):
        super().__init__()
        self.setWindowTitle('Cambiar datos personales')
        self.setMinimumSize(600, 600)
        self.initUI()

        """Traigo el valor de DNI desde MainWindow"""
        self.dni=dni

    def initUI(self):
        central_widget = QWidget(self)
        layout = QVBoxLayout(central_widget)

        # Label
        
        label_atributo= QLabel("Ingrese el atributo a cambiar:")
        label_valor = QLabel("Ingrese el valor por el que desea modificar")
        self.label_confirmado = QLabel("El dato ha sido cambiado satisfactoriamente", central_widget)
        self.label_confirmado.setStyleSheet("color: green")
        self.label_confirmado.hide()
        
        """Creacion de combo box con sus opciones e input box para el atributo y el valor a cambiar"""
        self.combo_atributo = QComboBox(self)
        self.input_valor = QLineEdit(central_widget)

        self.combo_atributo.addItem("DNI")
        self.combo_atributo.addItem("Nombre")
        self.combo_atributo.addItem("Apellido")
        self.combo_atributo.addItem("Fecha de nacimiento")
        self.combo_atributo.addItem("Email")
        self.combo_atributo.addItem("Contraseña")

        """Se agregan los widgets al layout"""
        layout.addWidget(label_atributo)
        layout.addWidget(self.combo_atributo)
        layout.addWidget(label_valor)
        layout.addWidget(self.input_valor)
        layout.addWidget(self.label_confirmado)


        """Creacion de botones para continuar hacia validación y volver a pagina anterior"""
        self.button = QPushButton("Continuar")
        self.button.clicked.connect(self.ClickContinuar)
        layout.addWidget(self.button)

        self.button2 = QPushButton("Volver")
        self.button2.clicked.connect(self.Volver)

        """Se aplica el estilo a la ventana"""
        self.setLayout(layout)
        with open('Estilo.qss', 'r') as est:
            style = est.read()
            self.setStyleSheet(style)        
        self.show()


    def show_confirmado(self):
        self.label_confirmado.show()


    def ClickContinuar(self):
        atributo= self.combo_atributo.currentText().strip().lower()
        valor = self.input_valor.text()     

        if val.validaratributo(atributo)==False:
            validado= False
        else:
            match atributo:

                case 'dni':
                    if val.validardni(valor)==False:
                        self.input_valor.clear()
                        self.input_valor.setPlaceholderText("Formato DNI erroneo")
                        self.input_valor.textChanged.connect(self.clear_inputs)
                        palette = self.input_valor.palette()
                        placeholder_color = QColor(255, 0, 0)  # Red color
                        palette.setColor(QPalette.PlaceholderText, placeholder_color)
                        self.input_valor.setPalette(palette)
                    else:
                        diccUsuarios[self.dni].cambiar_dato(self.dni,atributo,valor)
                        self.show_confirmado()  

                case 'nombre':
                    if val.validarnombre(valor)==False:
                        self.input_valor.clear()
                        self.input_valor.setPlaceholderText("Ingrese un nombre correcto")
                        palette = self.input_valor.palette()
                        placeholder_color = QColor(255, 0, 0)  # Red color
                        palette.setColor(QPalette.PlaceholderText, placeholder_color)
                        self.input_valor.setPalette(palette)
                    else:
                        diccUsuarios[self.dni].cambiar_dato(self.dni,atributo,valor)
                        self.show_confirmado()

                case 'apellido':
                    if val.validarnombre(valor)==False:
                        self.input_valor.clear()
                        self.input_valor.setPlaceholderText("Ingrese un apellido correcto")
                        palette = self.input_valor.palette()
                        placeholder_color = QColor(255, 0, 0)  # Red color
                        palette.setColor(QPalette.PlaceholderText, placeholder_color)
                        self.input_valor.setPalette(palette)
                    else:
                        diccUsuarios[self.dni].cambiar_dato(self.dni,atributo,valor)
                        self.show_confirmado()

                case 'fecha de nacimiento':  
                    if val.validarFecha(valor)==False:
                        self.input_valor.clear()
                        self.input_valor.setPlaceholderText("Ingrese una fecha correcta")
                        palette = self.input_valor.palette()
                        placeholder_color = QColor(255, 0, 0)  # Red color
                        palette.setColor(QPalette.PlaceholderText, placeholder_color)
                        self.input_valor.setPalette(palette)
                    else:
                        diccUsuarios[self.dni].cambiar_dato(self.dni,atributo,valor)
                        self.show_confirmado()

                case 'email':
                    if val.validaremail(valor)==False:
                        self.input_valor.clear()
                        self.input_valor.setPlaceholderText("Ingrese un email correcto")
                        palette = self.input_valor.palette()
                        placeholder_color = QColor(255, 0, 0)  # Red color
                        palette.setColor(QPalette.PlaceholderText, placeholder_color)
                        self.input_valor.setPalette(palette)
                    else:
                        diccUsuarios[self.dni].cambiar_dato(self.dni,atributo,valor)
                        self.show_confirmado()
              
                case 'contraseña':
                    if val.validarcontraseña(valor)==False:
                        self.input_valor.clear()
                        self.input_valor.setPlaceholderText("Ingrese una contraseña de entre 6 y 20 caract.")
                        palette = self.input_valor.palette()
                        placeholder_color = QColor(255, 0, 0)  # Red color
                        palette.setColor(QPalette.PlaceholderText, placeholder_color)
                        self.input_valor.setPalette(palette)
                    else:
                        contraseñanuevo = valor   #SE PUEDE HACER UNA FUNCION EN PERSONAS PARA QUE SE HAGA ESTO. 
                        contraseñanuevo = contraseñanuevo.encode('utf-8')
                        objetoHash = hashlib.sha256(contraseñanuevo)
                        contraHasheada = objetoHash.hexdigest()
                        diccUsuarios[self.dni].cambiar_dato(self.dni,atributo,contraHasheada)
                        util.escribirCsv('Usuarios.csv', diccUsuarios)
                        self.show_confirmado()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    login_window = LoginWindow()
    login_window.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    app = QApplication(sys.argv)
    main_window = MainWindow()
    main_window.show()
    sys.exit(app.exec_())
